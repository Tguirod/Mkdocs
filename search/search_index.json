{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenido al Repositorio de practicas de Tomas","text":"<p>Este es el repositorio de mi documentaci\u00f3n basado en MkDocs con el tema Material.</p> <p>\ud83d\udccc Repositorio en GitHub: Tguirod/Mkdocs</p>"},{"location":"#descripcion","title":"\ud83d\udcd6 Descripci\u00f3n","text":"<p>Este sitio contiene la documentaci\u00f3n de algunas de las pr\u00e1cticas que he realizado en el curso. Cada pr\u00e1ctica incluye instrucciones detalladas, ejemplos y c\u00f3digo relevante para facilitar el aprendizaje y la implementaci\u00f3n.</p>"},{"location":"#tecnologias-utilizadas-para-esta-practica-en-concreto","title":"\ud83d\ude80 Tecnolog\u00edas Utilizadas para esta practica en concreto","text":"<ul> <li>MkDocs: Generador de documentaci\u00f3n est\u00e1tica.</li> <li>Material for MkDocs: Tema avanzado para mejorar la visualizaci\u00f3n.</li> <li>Markdown: Lenguaje de marcado para escribir documentaci\u00f3n de forma sencilla.</li> <li>GitHub Pages: Hosting gratuito para documentaci\u00f3n est\u00e1tica.</li> </ul>"},{"location":"#practicas","title":"\ud83d\udcd6 Pr\u00e1cticas","text":"<p>Aqu\u00ed est\u00e1n listadas todas las pr\u00e1cticas disponibles:</p> <ol> <li>Practica 5.4 - Subida de un nginx a Docker Hub</li> <li>Pr\u00e1ctica 5.2 - Instalacion de Wordpress en contenedores Dockers</li> <li>Pr\u00e1ctica 5.1 - Docker y Docker compose con prestashop</li> <li>[Pr\u00e1ctica 4.5 - Terraform]</li> <li>[Pr\u00e1ctica 4.3 - Instalacion de instancias con Python y AWS]</li> <li>[Pr\u00e1ctica 4.1 - Instalacion de instancias con AWS]</li> </ol>"},{"location":"#contacto","title":"\ud83d\udcec Contacto","text":"<p>Si tienes dudas o sugerencias, puedes abrir un issue en el repositorio o contactarme directamente. \u00a1Gracias por visitar la documentaci\u00f3n! \ud83d\ude80</p>"},{"location":"practica1/","title":"Practica5.4","text":"<p>En esta practica vamos a realizar una subida de un nginx a docker hub para posteriormente descargarnos nuestro respositorio de dockerhub y instalar una web estatica.</p>"},{"location":"practica1/#configuracion-del-docker-hub","title":"Configuracion del Docker hub","text":"<p>Tendremos que crearnos una cuenta en docker hub para poder utilizarla . Deberemos conseguir una clave secreta para usarla despues para publicar nuestros repositorios dockers Tambien tendremos que agregar nuestra clave secreta a las variables del github.</p>"},{"location":"practica1/#dockerfile","title":"DockerFile","text":"<p>Tendremos que usar un archivo dockerfile que es donde estara la configuracion para tener servicio de Nginx con la siguiente aplicaci\u00f3n web est\u00e1tica</p> <pre><code>FROM ubuntu:24.04\n\nLABEL AUTHOR=\"Tomas guijarro Rodriuez \"\nLABEL DESCRIPTION=\"Esto es una prueba de instalacion\"\n\nENV WORDPRESS_DB_HOST=mysql\n\n\nRUN apt update &amp;&amp; \\\n    apt install nginx -y &amp;&amp; \\\n    apt install git -y &amp;&amp; \\\n    rm -rf /var/lib/apt/list/*\n\nRUN git clone https://github.com/josejuansanchez/2048 /app &amp;&amp; \\\n    mv /app/* /var/www/html/\n\nEXPOSE 80\n\nCMD [ \"nginx\",\"-g\", \"daemon off;\" ]\n</code></pre>"},{"location":"practica1/#docker-compose","title":"Docker Compose","text":"<p>Una vez que tengamos subido nuestro repositorio de docker a dockerhub vamos a instalar en nuestra maquina de aws una web estatica de prueba sacando la imagen de nuestro repositorio para comprobar que funciona correctamente.</p> <pre><code>services:\n  web:\n    image: tguirod275/2048\n    container_name: pruebaipestatica\n    ports:\n      - 80:80\n    restart: always\n</code></pre>"},{"location":"practica1/#comprobaciones","title":"Comprobaciones","text":"<p>Primero vamos a comprobar que efectivamente funciona la subida del repositorioa dockerhub. Como podemos comprobar se suben correctamente.</p> <p></p> <p>Tambien si accedemos a docker hub veremos que tenemos el repositorio de docker subido</p> <p></p> <p></p> <p>Ejecutamos el archivo de docker compose y comprobamos que se ejecuta correctamente.</p> <p></p> <p>Una vez ejecutado probamos a acceder  via web de nuestra pagina estatica para comprobar que funciona.</p> <p></p>"},{"location":"practica2/","title":"Practica5.2","text":"<p>En esta practica se realizara la instalacion de wordpress en contenedores dockers.</p>"},{"location":"practica2/#variables-y-dominio","title":"Variables y Dominio","text":"<p>Necesitaremos un archivo de variables .env donde tendremos las variables que vamos a utilizar.</p> <p>Tambien Necesitaremos tambien un dominio para que lets encrypt pueda usarlo</p> <p></p>"},{"location":"practica2/#instalacion-de-wordpress-en-docker","title":"Instalacion de Wordpress en docker","text":"<p>El archivo YML que utilizaremos contendra la misma informacion que hemos utilizado en la practica anterior pero cambiaremos prestashop por la instalacion de wordpress asi como en el https-portal tendremos que poner el puerto 8080.</p> <pre><code>version: '3.4'\n\nservices:\n  mysql:\n    image: mysql:9.1\n    ports: \n      - 3306:3306\n    environment: \n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${MYSQL_DATABASE}\n      - MYSQL_USER=${MYSQL_USER}\n      - MYSQL_PASSWORD=${MYSQL_PASSWORD}\n    volumes: \n      - mysql_data:/var/lib/mysql\n    networks: \n      - backend-network\n    restart: always\n\n  phpmyadmin:\n    image: phpmyadmin:5.2.1\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n\n\n  wordpress:\n    image: bitnami/wordpress:latest\n    container_name: wordpress\n    environment:\n      - WORDPRESS_DATABASE_HOST=${WORDPRESS_DATABASE_HOST}\n      - WORDPRESS_DATABASE_USER=${WORDPRESS_DATABASE_USER}\n      - WORDPRESS_DATABASE_PASSWORD=${WORDPRESS_DATABASE_PASSWORD}\n      - WORDPRESS_DATABASE_NAME=${WORDPRESS_DATABASE_NAME}\n      - WORDPRESS_BLOG_NAME=${WORDPRESS_BLOG_NAME}\n      - WORDPRESS_USERNAME=${WORDPRESS_USERNAME}\n      - WORDPRESS_EMAIL=${WORDPRESS_EMAIL}\n    volumes:\n      - wordpress:/var/www/html\n    networks:\n      - frontend-network\n      - backend-network\n    restart: always\n    depends_on:\n      - mysql\n\n  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://wordpress:8080\"\n      STAGE: 'production' # Don't use production until staging works\n      # FORCE_RENEW: 'true'\n    networks:\n      - frontend-network\n\nvolumes:\n  mysql_data:\n  wordpress:\n\nnetworks: \n  backend-network:\n  frontend-network:\n</code></pre>"},{"location":"practica2/#comprobaciones","title":"Comprobaciones:","text":"<p>Como podemos comprobar funciona correctamente al entrar en la pagina web de nuestro dominio y con el certificado https</p> <p></p> <p>Tambien podemos comprobar que podemos acceder a la web de phpmyadmin</p> <p></p>"},{"location":"practica3/","title":"Practica5.1","text":"<p>En esta practica vamos a utilizar docker y docker compose para habilitar un protocolo https en prestashop y se ejecutara sobre los contenedores de docker. Para ello primero tendremos que tener una maquina con minimo 20 de espacio</p>"},{"location":"practica3/#variables","title":"Variables","text":"<p>Necesitaremos nuestro archivo con variables .env que utilizaremos para asginar las variables que vamos a utilizar</p> <p>Tambien necesitaremos tener un dominio ip : </p>"},{"location":"practica3/#instalacion-de-docker","title":"Instalacion de docker","text":"<p>Primero tendremos que instalar docker y docker compose para realizar todas las instalaciones que vayamos a hacer .</p> <pre><code>apt install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n</code></pre> <p>Una vez instalado vamos a proceder a configurar un yml con toda la instalacion de la practica.</p>"},{"location":"practica3/#docker-compose-para-instalar-prestashop-con-https","title":"Docker compose para instalar prestashop con HTTPS","text":"<p>A continuacion instalaremos los diferentes servicios que serian mysql , prestashop , phpmyadmin y el https con lets encrypt.</p> <pre><code>version: '3.4'\n\nservices:\n  mysql:\n    image: mysql:9.1\n    ports: \n      - 3306:3306\n    environment: \n      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}\n      - MYSQL_DATABASE=${MYSQL_DATABASE}\n      - MYSQL_USER=${MYSQL_USER}\n      - MYSQL_PASSWORD=${MYSQL_PASSWORD}\n    volumes: \n      - mysql_data:/var/lib/mysql\n    networks: \n      - backend-network\n    restart: always\n\n  phpmyadmin:\n    image: phpmyadmin:5.2.1\n    ports:\n      - 8080:80\n    environment: \n      - PMA_ARBITRARY=1\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n\n  prestashop:\n    image: prestashop/prestashop:8\n    environment: \n      - DB_SERVER=mysql\n    volumes:\n      - prestashop_data:/var/www/html\n    networks: \n      - backend-network\n      - frontend-network\n    restart: always\n    depends_on: \n      - mysql\n\n  https-portal:\n    image: steveltn/https-portal:1\n    ports:\n      - 80:80\n      - 443:443\n    restart: always\n    environment:\n      DOMAINS: \"${DOMAIN} -&gt; http://prestashop:80\"\n      STAGE: 'production' # Don't use production until staging works\n      # FORCE_RENEW: 'true'\n    networks:\n      - frontend-network\nvolumes:\n  mysql_data:\n  prestashop_data:\nnetworks: \n  backend-network:\n  frontend-network:\n</code></pre>"},{"location":"practica3/#comprobaciones","title":"Comprobaciones","text":"<p>Podemos ver que se ejecuta correctamente y se crean los contenedores correspondientes.</p> <p></p> <p>Una vez ejecutado el docker compose accedemos a traves de la paina web y podemos ver que se accede correctamente.</p> <p></p> <p>Una vez que accedemos configuramos para comprobar que la base de datos funciona correctamente y siguiente</p> <p></p> <p>Se crea y se instala el prestashop correctamente</p> <p></p> <p>Y accedemos a la tienda para comprobar que funciona tambien</p> <p></p> <p>Borramos la carpeta install para poder acceder a la seccion de administrar tienda y como podemos comprobar funciona correctamente</p> <p></p> <p>Con esto dariamos por terminada la practica.</p>"}]}